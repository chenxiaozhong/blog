---
layout: post
title:  "笔记"
date:   2015-01-12 10:18:00
categories: Essay
---

1、数据库优化方法
a、1）通过优化索引，找出id，并拼成 "123,90000,12000" 这样的字符串。2）第2次查询通过in (ids) 找出结果。 

http://blog.sina.com.cn/s/blog_76c0a1c50101d0gq.html

常见的数据库优化方法：索引（数据库），缓存，分表，分库，sql优化。

索引：创建索引一般有以下两个目的：维护被索引列的唯一性和提供快速访问表中数据的策略。95% 的数据库能 问题都可以采用索引技术得到解决。索引有助于提高检索性能，但过多或不当的索引也会导致系统低 效。因为用户在表中每加进一个索引，数据库就要做更多的工作。过多的索引甚至会导致索引碎片。 

缓存：hibernate，spring3有缓存模块
 
分表：针对每个时间周期产生大量的数据，可以考虑采用一定的策略将数据存到多个数据表中。
  
分库：就是将系统按照模块相关的特征分布到不同的数据中，以提高系统整体负载能力。

硬件优化、配置优化、结构优化、查询语句优化

2、js跨域问题
	a、服务端代理访问
	b、script头部标签方式动态添加url
	c、iframe嵌入方式
3、spring 原理
4、http的工作原理
5、java虚拟机的工作原理
6、MongoDB的特点	
	开源
	免费
	配置简单并且灵活
    面向文件类型
    高性能
    高可用性
    易于扩展性
    丰富的查询语言
##

设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。（来自百度百科）

###模版方法模式实现要素：

准备一个抽象类，将部分逻辑以具体方法的形式实现，然后声明一些抽象方法交给子类实现具体逻辑，用钩子方法给予子类更大的灵活性，最后将方法汇总构成一个不可改变的模版方法（final）

###适用场景

A、算法或者操作遵循类似的逻辑

B、重构时把相同的代码抽取到父类中

C、重要、复杂的算法，核心算法设计为模版算法

###优点

A、封装性好

B、复用性好

C、屏蔽细节

D、便于维护

###缺点

A、继承，java中只能可以单继承

斐波那契数列 1,1,2,3,5,8,13 
迭代实现
public int getNumber(int pos){
	if(pos == 1 || pos == 2){
		return 1;
	}
	reutrn getNumber(pos -1 ) + getNumber(pos - 2);
}

冒泡排序
public void sort(int[] array){
	int temp = 0;
	for(int i= 0;i< array.length;i++){
		for(int j=i; j < array.length;j++){
			if(array[i] > array[j]){
				temp = array[i];
				array[i] = array[j];
				array[j] = temp; 
			}
		}
	}
}